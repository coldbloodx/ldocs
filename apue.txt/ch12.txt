第12章
线程控制
12.1引言
在第11章中，学习了线程和线程同步的基础知识。在本章中，将学习控制线程行为方面的 详细内容，在前面的章节中对线程属性和同步原语属性都取其默认行为，忽略了这些属性的具 体介绍。
接下来将介绍同一进程中的多个线程之间如何保持数据的私有性，最后讨论基于进程的系 统调用如何与线程进行交互。
12.2线程限制
在2.5.4节中讨论了sysconf函数，Single UNIX Specification定义了与线程操作有关的一些 限制，表2-10并没有列出这些限制。与其他的系统限制一样，这些线程限制也可以通过 sysconf函数进行查询。表12-1总结了这些限制。
表12-1线程限制和sysconf的name参数
限制名称	描述	name参数
PTHREAD_DESTRUCTOR_
ITERATIONS
PTHREAD_KEYS_MAX
PTHREAD_STACK_MIN
PTHREAD_THREADS_MAX	线程退出时操作系统实现试 图销毁线程私有数据的最大次 数(见12.6节)
进程可以创建的键的最大数 目(见12.6节)
一个线程的栈可用的最小字 节数(见12.3节)
进程可以创建的最大线程数 (见12.3节)	_SC_THREAD_DESTRUCT 0R_ITERATIONS
_SC_THREAD_KEYS_MAX
_SC_THREAD_STACK_MIN
_SC_THREAD_THREADS_
MAX
与sysconf报告的其他限制一样，这些限制的使用是为了增强应用程序在不同的操作系统 实现之间的可移植性。例如，如果应用程序需要为它管理的每个文件创建四个线程，但是系统 却并不允许创建所有这些线程，这时可能就必须限制当前可并发管理的文件数。
表12-2给出了本书描述的四种操作系统实现中线程限制的值。当某些操作系统实现没有定 义相应的sysconf符号(以_SC_开头)时，图中列出的值就是“未定义符号”，如果操作系 统实现的限制是不确定的，列出的值就是“没有确定的限制”，但这并不意味着值是无限制 的，“不支持”表明操作系统实现定义了相应的sysconf限制符号，但是sysconf函数无法 识别这个符号。

 
314 第12章线程控制
注意，虽然某些操作系统实现可能没有提供访问这些限制的方法，但这并不意味着这些限制不存 在，它只是表明操作系统实现没有提供使用sysconf访问这些值的方法。
表12-2线程配置限制的例子
限芾lj	FreeBSD 5.2.1	Linux 2.4.22	Mac OS X 10.3	Solans 9
PTHREAD 一DESTRUCTOR 一ITERATI0NS PTHREAD_KEYS_MAX PTHREAD_STACK_MIN PTHREAD_THREADS_MAX	未定义符号 未定义符号 未定义符号 未定义符号	不支持
不支持
不支持
不支持	未定义符号 未定义符号 未定义符号 未定义符号	没有确定的限制 没有确定的限制 4 096
没有确定的限制
12.3线程属性
在第11章所有调用pthread—create函数的例子中，传人的参数都是空指针，而不是指向 pthread_attr_t结构的指针。可以使用口1:11^3£1_3(:(：2：_(:结构修改线程默认属性，并把这 些属性与创建的线程联系起来。可以使用pthread_attr_init函数初始化pthread_attr_t 结构。调用pthread_attr_init以后，pthread_attr_t结构所包含的内容就是操作系统实 现支持的线程所有属性的默认值。如果要修改其中个别属性的值，需要调用其他的函数，这方 面的细节将在本节的后续内容中讨论。
#include <pthread.h>
int pthread_attr一init (pthread_attr_t *attr)；
int pthread_attr_destroy (pthread_attr_t *attr)；
两者的返回值都是：若成功则返回0，否则返回错误编号
如果要去除对pthread_attr_t结构的初始化，可以调用pthread_attr_destroy函 数。如果Pthread_attr_init实现时为属性对象分配了动态内存空间，pthread_attr_ destroy将会释放该内存空间。除此之外，pthread_attr_destroy还会用无效的值初始 化属性对象，因此如果该属性对象被误用，将会导致pthread_create函数返回错误。
pthread_attr_t结构对应用程序是不透明的，也就是说应用程序并不需要了解有关属 性对象内部结构的任何细节，因而可以增强应用程序的可移植性。POSIX.I沿用了这种模型， 并且为查询和设置每种属性定义了独立的函数。
表12-3总结了POSIX.I定义的线程属性。虽然POSIX.1还为实时线程定义了额外的属性，但 这里并不打算讨论这些属性。表12-3同时给出了操作系统平台对每种线程属性的支持情况。如 果某些属性是通过过时的接口进行访问的，则在表中用ob表示。
表12-3 POSIX.1线程属性
名称	描述	FreeBSD 5.2.1	Linux 2.4.22	Mac OS X 10.3	Solaris 9
detachstate	线程的分离状态属性	•	•	•	•
guardsize	线程找末尾的警成缓冲区大小(字节数>		•	•	•
stackaddr	线程栈的最低地址	ob	•	•	ob
stacksize	线程找的大小(字节数)	•	•	•	•

 
12.3线程属性 315
11.5节介绍了分离线程的概念。如果对现有的某个线程的终止状态不感兴趣的话，可以使 用pthread_detach函数让操作系统在线程退出时收回它所占用的资源。
如果在创建线程时就知道不需要了解线程的终止状态，则可以修改pthread_attr_t结构 中的defac/isfafe线程属性，让线程以分离状态启动。可以使用p thr ead_a 11r_ setdetachstate函数把线程属性detoc/wftWe设置为下面的两个合法值之一：设置为PTHREAD_ CREATE_DETACHED,以分离状态启动线程，或者设置为PTHREAD—CREATE_JOINABLE，正常 启动线程，应用程序可以获取线程的终止状态。
#include <pthread.h>
int pthread—attr—getdetachstate (const pthread一attr一t ^restrict attr,
int *detachstate)；
int pthread—attr—setdetachstate (pthread一attr_t *attr, int detachstate)；
两者的返回值都是：若成功则返回0,否则返回错误编号
可以调用？七1^6 3(1_3)；)；：1：_96七(^七30：113七3七6函数获取当前的如(1(：/1对(加线程属性，第二 个参数所指向的整数也许被设置为PTHREAD_CREATE_DETACHED，也可能设置为 PTHREAD_CREATE_JO INABLE，具体要取决于给定p thr e ad_a t tr—t结构中的属性值。
 
程序清单12-1给出了一个以分离状态创建线程的函数。
	程序清单12-1以分离状态创建的线程	
#include "apue.h"
#include <pthread.h>
makethread(void *(*fn)(void *), void *arg)
{
int	err；
pthread_t	tid；
pthread_attr_t attr;
err = pthread—attr一init(&attr); if (err !: 0)~ ~ return(err)；
err = pthread一attr_setdetachstate(&attr, PTHREAD_CREATE一DETACHED}; if (err == 0)
err = pthread 一 creat e (&t id, &attr, fri, arg); pthread_attr_destroy(&attr)； return(err)；
注意，这里忽略了pthread_attr_destroy函数调用的返回值。在这种情况下，由于对 线程属性进行了合理的初始化， p thr ead_a ttr_de s troy—般不会失败。但是如果 pthread_attr_deStroy确实出现了失败的情况，清理工作就会变得很困难：必须销毁刚刚 创建的线程，而这个线程可能已经运行，并且与pthread_attr_destroy函数可能是异步执 行的。忽略pthread_attr_destroy的错误返回可能出现的最坏情况是：如果pthread— attr_init分配了内存空间，这些内存空间会被泄漏。另一方面，如果pthread_attr_ init成功地对线程属性进行了初始化，但pthread—attr_destroy在做淸理工作时却出现

 
316 第12章线程控制
了失败，就没有任何补救策略，因为线程属性结构对应用来说是不透明的，可以对线程属性结 |390|构进行清理的唯一接口是pthread_attr_destroy,但它失败了。	□
对于遵循POSIX标准的操作系统来说，并不一定要支持线程栈属性，但是对遵循XSI的系 统，支持线程栈属性就是必须的。可以在编译阶段使用_POSIX_THREAD_ATTR_STACKADDR
符号来检查系统是否支持线程栈属性，如果系统定义 了这些符号，就说明它支持相应的线程栈属性。也可以通过在运行阶段把_SC_THREAD_ ATTR_STACKADDR和_SC_THREAD_ATTR—STACKSIZE参数传给sysconf函数，检查系统对 线程栈属性的支持情况。
P0SIX.1定义了线程栈属性的一些操作接口。虽然很多pthread实现中仍然提供两个早些时 候的函数pthread_attr_getstackaddi^pipthread_attr_setstackaddr，但在Single UNIX Specification第3版中这两个函数已被标记为过时，线程栈属性的查询和修改一般是通过 较新的函数pthread_attr一这些新的函 数消除了老接口定义中存在的二义性。
#include <pthread.h>
int pthread_attr—gets tack (const pthread_attr_t *restrict attrt
void **restrict stackaddr, size_t * restrict stacksize)；
int pthread attr setstack (const pthread_attr_t *attr,
void * stackaddr, size_t * stacksize);
两者的返回値都是：若成功则返冋0，否则返问错误编号
这两个函数可以用于管理线程属性，也可以用于管理伽由如线程属性。
对进程来说，虚拟地址空间的大小是固定的，进程中只有一个栈，所以它的大小通常不是 问题。但对线程来说，同样大小的虚拟地址空间必须被所有的线程栈共享。如果应用程序使用 了太多的线程，致使线程栈的累计大小超过了可用的虚拟地址空间，这时就需要减少线程默认 的栈大小。另一方面，如果线程调用的函数分配了大量的自动变量或者调用的函数涉及很深的 栈帧(stack frame),那么这时需要的栈大小可能要比默认的大。
如果用完了线程找的虚拟地址空间，可以使用malloc或者mmap (见14.9节)来A其他找 分配空间，并用Pthread_attr_setstack函数来改变新建线程的栈位置。线程栈所占内存 范围中可寻址的最低地址可以由swdad办参数指定，该地址与处理器结构相应的边界对齐。
程属性被定义为栈的内存单元的最低地址，但这并不必然是栈的开始位置。对 于某些处理器结构来说，找是从高地址向低地址方向伸展的，那么对adtad办线程属性就是栈的 结尾而不是开始位置。
丨391丨	pthread_attr_getstackaddr 和 pthread_attr_setstackaddr 的缺陷在于 sffldtaA/r 参数并没有
明确地指定。它可以解释为栈的开始地址，还可以解释成用作栈的内存范围的最低地址。在栈内存地址 空间从高地址向低地址扩展的处理器结构中，如果sMcAatWr参数是栈地址空间的最低地址，那么就需要 知道栈的大小才能确定栈的开始位置。pthread_attr_getstack和pthread_attr—setstackA数糾正 了这些缺陷。
应用程序也可以通过 pthread_attr_getstacksizefppthread_attr_setstacksize 函数读取或设置线程属性伽dbw。

 
12.3线程属性 317
#include <pthread.h>
int pthread_attr_getstacksize (const pthread_attr一t ^restrict attr,
sizet * restrict stacksize)；
int pthread_attr_setstacksize (pthread_attr_t *attr, size_t stacksize);
两者的返回值都是：若成功则返回0，否则返回错误编号
如果希望改变栈的默认大小，但又不想自己处理线程栈的分配问题，这时使用pthread_ attr_setstacksize函数就非常有用。
线程属性控制着线程栈末尾之后用以避免栈溢出的扩展内存的大小。这个属性默 认设置为PAGESIZE个字节。可以把线程属性设为0，从而不允许属性的这种特征行为 发生：在这种情况下不会提供警戒缓冲区。同样地，如果对线程属性stocfcddrf乍了修改，系统 就会假设我们会自己管理栈，并使警戒栈缓冲区机制无效，等同于把线程属性设为0。
#include <pthread.h>
int pthread_attr_getguardsize(const pthread一attr—t ^restrict attr,
size_t * re strict guardsize)；
int pthread_attr_setguardsize (pthread—attr一t *attr, size一t guardsize)；
两者的返回值都是：若成功则返回0,否则返回错误编号
如果线程属性被修改了，操作系统可能把它取为页大小的整数倍。如果线程的栈 指针溢出到警戒区域，应用程序就可能通过信号接收到出错信息。
Single UNIX Specification还定义了其他的一些可选的线程属性作为实时线程可选属性的一 部分，但在这里不讨论这些属性。
更多的线程属性
线程还有其他的一些属性，这些属性并没有在Pthread_attr_t结构中表达：
•可取消状态(在12_7节中讨论)。
•可取消类型(同样在12.7节中讨论)。
•并发度。
并发度控制着用户级线程可以映射的内核线程或进程的数目。如果操作系统的实现在内核 级的线程和用户级的线程之间保持一对一的映射，那么改变并发度并不会有什么效果，因为所 有的用户级的线程都可能被调度到。但是，如果操作系统的实现让用户级线程到内核级线程或 进程之间的映射关系是多对一的话，那么在给定时间内增加可运行的用户级线程数，可能会改 善性能。pthread_setconcurrency函数可以用于提示系统，表明希望的并发度。
#include <pthread.h>	
int pthread_getconcurrency(void)；	
	返回值：当前的并发度
int pthread一 set concurrency (int level)；	
	返回值：若成功则返回0，否则返回错误编号
pthread_getconcurrency函数返回当前的并发度。如果操作系统当前正控制着并发度 (即之前没有调用过Pthread_setconcurrency函数)，那么pthread_getconcurrency

 
318 第12章线程控制
将返回0。
pthread_setconcurrency函数设定的并发度只是对系统的一个提示，系统并不保证请 求的并发度一定会被采用。如果希望系统自己决定使用什么样的并发度，就把传入的参数fcve/ 设为0。这样，应用程序调用/eveZ参数为0的pthread_setconcurrency函数，就可以撤销在 这之前/eve/参数非零的pthread_setconcurrency调用所产生的作用。
12.4同步属性
就像线程具有属性一样，线程的同步对象也有属性。本节讨论互斥量、读写锁和条件变量 的属性。
1.互斥置属性
Mpthread_mutexattr_init|0^>f-bpthread_mutexattr_t|§^l,用pthread一 mutexattr_destroy来对该结构进行回收。	'
#include <pthread.h>
int pthread_mutexattr_init (pthread_mutexattr_t *attr)； int pthread—mutexattr一destroy (pthread一mutexattr一t *attr)；
返回值：若成功则返回0，否则返回错误编号
结构。值得注意的两个属性是进程共享属性和类型属性。P0SIX.1中，进程共享属性是可选的， 可以通过检査系统中是否定义了 _POSIX_THREAD_PROCESS_SHARED符号来判断这个平台是 否支持进程共享这个属性，也可以在运行时把_SC_THREAD_PROCESS_SHARED参数传给 sysconf函数进行检査。虽然这个选项并不是遵循POSIX标准的操作系统必须提供的，但是 Single UNIX Specification要求遵循XSI标准的操作系统支持这个选项。
在进程中，多个线程可以访问同一个同步对象。在第11章中巳说明，这是默认的行为。在 这种情况下，进程共享互斥量属性需设置为PTHREAD_PROCESS_PRIVATE。
第14章和第15章将说明，存在这样的机制，允许相互独立的多个进程把同一个内存区域映 射到它们各自独立的地址空间中。就像多个线程访问共享数据一样，多个进程访问共享数据通 常也需要同步。如果进程共享互斥量属性设置为PTHREAD一PROCESS_SHARED,从多个进程共 享的内存区域中分配的互斥量就可以用于这些进程的同步。
得到它的进程共享属性，可以用Pthread—mutexattr_setpshared函数修改进程共享属4。
#include <pthread.h>
int pthread—mutexattr—getpshared(const pthread—mutexattr_t *
restrict attr,
int * restrict pshared)；
int pthread—mutexattr_setpshared (pthread_mutexattr_t *attr,
int pshared)；
	返回值：若成功则返回0,否则返回错误编号
进程共享互斥量属性设为PTHREAD_PROCESS_PRIVATE时，允许pthread线程库提供更加有

 
12.4同步属性 319
效的互斥量实现，这在多线程应用程序中是默认的情况。在多个进程共享多个互斥量的情况下， pthread线程库可以限制开销较大的互斥量实现。
类型互斥量属性控制着互斥量的特性。P0SIX.1定义了四种类型。 PTHREAD_MUTEX_ NORMAL类型是标准的互斥量类型，并不做任何特殊的错误检査或死锁检测。PTHREAD— MUTEX_ERRORCHECK互斥量类型提供错误检查。
PTHREAD_MUTEX_RECURSIVE互斥量类型允许同一线程在互斥量解锁之前对该互斥量进 行多次加锁。用一个递归互斥量维护锁的计数，在解锁的次数和加锁次数不相同的情况下不会 释放锁。所以如果对一个递归互斥量加锁两次，然后对它解锁一次，这个互斥量依然处于加锁 状态，在对它再次解锁以前不能释放该锁。
最后，PTIiREAD_MUTEX—DEFAULT类型可以用于请求默认语义。操作系统在实现它的时候 可以把这种类型自由地映射到其他类型。例如，在Linux中，这种类型映射为普通的互斥量类型。
四种类型的行为如表12-4所示。“不占用时解锁”这一栏指的是一个线程对被另一个线程加 锁的互斥量进行解锁的情况，“在已解锁时解锁”这一栏指的是当一个线程对已经解锁的互斥 量进行解锁时将会发生的情况，这通常是编码错误所致。
表12-4互斥量类型行为
互斥量类型	没有解锁时再次加锁？	不占用时解锁？	在已解锁时解锁？
PTHREAD_MUTEX_NORMAL	死锁	未定义	未定义
PTHREAD一MUTEX_ERRORCHECK	返回错误	返回错误	返回错误
PTHREAD_MUTEX_RECURSIVE	允许	返回错误	返回错误
PTHREAD_MUTEX_DEFAULT	未定义	未定义	未定义
可以用pthread_mutexa ttr—get type mutexattr_settype函数修改互斥量类型属性。
用 pthread_
#include <pthread.h>
int pthread一 mutexattr一gettype(const pthread_mutexattr_t *
restrict attr, int ^restrict type)；
int pthread一mutexattr一settype (pthread_mutexattr_t *attr, int type)；
两者的返回值都是：若成功则返回0,否则返回错误编号
回忆11.6节中学过的，互斥量用于保护与条件变量关联的条件。在阻塞线程之前， pthread_cond_wait和pthread_cond_timedwait函数释放与条件相关的互斥量，这就允 许其他线程获取互斥量、改变条件、释放互斥量并向条件变量发送信号。既然改变条件时必须 占有互斥量，所以使用递归互斥量并不是好的办法。如果递归互斥量被多次加锁，然后用在调 用pthread_cond_wait函数中，那么条件永远都不会得到满足，因为pthread_cond_wait 所做的解锁操作并不能释放互斥量。
如果需要把现有的单线程接口放到多线程环境中，递归互斥量是非常有用的，但由于程序 兼容性的限制，不能对函数接口进行修改。然而由于递归锁的使用需要一定技巧，它只应在没 有其他可行方案的情况下使用。
图12-1解释了递归锁看似解决并发问题的情况。假设funcl和func2是函数库中现有的函
函

 
«
320 第12章线程控制
_数，其接口不能改变，因为存在调用这两个接口的应用程序，而且应用程序不能改动。
main
fund (x)
fund
pthread—mutex_l ock (x->lock)
func2 (x)
pthread_mutex一unlock(x->lock)
func2(x)
pthread—mutex_lock(x->lock)
pthread_mutex_unlock(x->lock)
图12-1使用递归锁的情况
为了保持接口跟原来相同，可以把互斥量嵌入到数据结构中，把这个数据结构的地址(x) 作为参数传入。这种方案只有在为该数据结构提供了分配函数时才可行，所以应用并不知道数 据结构的大小(假设在其中增加互斥量后必须扩大该数据结构的大小)。
如果在最初定义教据结构时，预留了足够的可填充字段’允许把一些填充字段替换成互斥量，那 么这种方法也是可行的。不过’大多数程序员并不善于预測未来，所以这不是普遍可行的经验。
如果funcl和func2函数都必须操作这个结构，而且可能会有多个线程同时访问该数据结 构，那么funcl和func2必须在操作数据以前对互斥量加锁。当funcl必须调用func2时，如 果互斥量不是递归类型，那么就会出现死锁。如果能在调用func2之前释放互斥量，在func2 返回后重新获取互斥量’那么就可以避免使用递归互斥量，但这也给其他的线程提供了机会， 其他的线程可能在funcl执行期间得到互斥量的控制权，修改这个数据结构。这也许是不可接 受的，当然具体的情况要取决于互斥量试图提供什么样的保护。
图12-2显示了这种情况下使用递归互斥量的另一种替代方法。通过提供func2函数的私有 版本(称之为func2_locked函数)，可以保持funcl和func2函数接口不变，并且避免使用 递归互斥量。要调用func2_locked函数，必须占有嵌入到数据结构中的互斥量，这个数据结 构的地址是作为参数传入的。func2_locked的函数体包含func2的副本，func2现在只是用 H?6]以获取互斥量，调用func2_locked,最后释放互斥量。
如果并不一定要保持库函数掊口不变，就可以在每个函数中另外再加一个参数，以表明这 个结构是否被调用者锁定。但是，如果可能的话，保持接口不变通常是更好的选择，这样可以 避免实现过程中人为加入的东西对原有接口产生不良影响。
提供函数的加锁版本和不加锁版本’这样的策略在简单的情况下通常是可行的。在比较复 杂的情况下，例如库需要调用库以外的函数’而且可能会再次回调库中的函数时，就需要依赖 递归锁。	口

 
12.4同步属性 321
function */ argument */ time to wait */
struct to_info {
void (*to_fn)(void *)； void *to_arg; struct timespec to一wait;
#define SECTONSEC 1000000000 /* seconds to nanoseconds ★/
#define USECTONSEC 1000	/* microseconds to nanoseconds */
void *
timeout_helper(void *arg)
{ _
struct to_info *tip；
tip = (struct to—info *)arg； nanosleep(&tip->to_wait# NULL);
(*tip->to_fn)(tip->to_arg)； return(0)；
main
fund (x) 	► fund
；	pthre ad_mutex_ lock (x - >lock)
func2一locked(x)
pthread 〜 mutex一unlock(x->lock)
func2 (x) 	► £unc2
pthread—mutex—lock (x->lock)	”
func2—locked(x) 	► func2_lock«d
pthread_mutex_vinlock (x- >lock)
图12-2避免使用递归锁的情况
翁_
程序清单12-2解释了有必要使用递归互斥量的另一种情况。这里，有一个“超时” (timeout)函数，它允许另一个函数可以安排在未来的某个时间运行。假设线程并不是很昂贵 的资源，可以为每个未决的超时函数创建一个线程。线程在时间未到时将一直等待，时间到了 以后就调用请求的函数。
	程序清单12-2使用递归互斥量	
#include "apue.h"
#include <pthread.h>
#include ctime.h>
#include <sys/time.h>
extern int makethread(void *(*)(void *), void *)；
* * *
/ / /

 
322 第12聿线程控制
void
timeout(const struct timespec *when, void (*func)(void *), void *arg) {
struct timespec now； struct timeval tv； struct to—info *tip； int	err;
gettimeofday(&tv, NULL)；
now.tv_sec - tv.tv 一sec;
now.tv—nsec = tv.tv_usec * USECTONSEC；'
if ((when->tv__sec > now.tv_sec) ||
(when->tv_sec == now.tv_sec && when->tv_nsec > now.tv_nsec)) { tip = malloc(sizeof(struct to_info))； if (tip != NULL) {
tip->to_fn = func； tip->t。一arg = arg;
tip->to_wait.tv一sec = when->tv—sec - now.tv•一sec; if (when->tv_nsec >= now.tv_nsec) {
tip->to_wait.tv_nsec = when->tv_nsec - now.tv•一nsec;
} else {
tip->tO-Wait.tv 一sec--;
tip->to_wait.tv_nsec = SECTONSEC - now.tv_nsec + when->tv_nsec；
} _
err = makethread(timeout_helper, (void *)tip)? if (err == 0) return；
*	We get here if (a) when <- now, or (b) malloc fails, or
*	(c) we can't make a thread, so we just call the function now, */
(*func)(arg)；
}
pthread_mutexattr—t attr； pthread_mutex_t mutex；
void
retry(void *arg)
{
pthread一 mutex一lock(&mutex)；
/* perform retry steps ... */ pthread_mutex_unlock(&mutex)；
} " 一 main(void)
{
int	err, condition, arg；
struct timespec when；
if ((err = pthread一mutexattr一init(&attr)) != 0)
err_exit(err, "pthread_mutexattr一init failed"); if ((err = pthread_mutexattr_settype(&attr,
PTHREAD一MUTEX一RECURSIVE” 7= 0)
err_exit (err, "can't set recursive type”； if ((err = pthread 一 mutex—init(&mutex, &attr)) != 0)

 
12.4同步属性 323
err一exit(err, "can't create recursive mutex")； /* …*/
pthread mutex lock(&mutex)；
/* …*/ if (condition) {
/* calculate target time "when" */ timeout(&when, retry, (void *)arg)；
}
/* . . , */
pthread一 mutex 一 uniock(&nrntex)；
/* …*/ exit(0)；
如果不能创建线程，或者安排函数运行的时间已过，问题就出现了。在这种情况下，要从 当前环境中调用之前请求运行的函数，因为函数要获取的锁和现在占有的锁是同一个，除非该 锁是递归的，否则就会出现死锁。
这里使用程序清单12-1中的makethread函数以分离状态创建线程。希望函数在未来的某 个时间运行，而且不希望一直等待线程结束。
吋以调用sleep等待超时到达，但它提供的时间粒度是秒级的，如果希望等待的时间不是 整数秒，需要用nanosleep⑵函数，它提供了类似的功能。
虽然nanosleep只有在Single UNIX Specification实时f展中是必须实现的，但本文讨论的所有平 台都4持该A数。
timeout的调用者需要占有互斥量来检査条件，并且把retry函数安排为原子操作^ retry函数试图对同-•个互斥量进行加锁，因此/除非互斥量是递归的，否则如果timeout函 数直接调用retry就会导致死锁。	□
2.	读写锁属性
读写锁与互斥量类似，也具有属性。用pthread_rwlockattr_init初始化pthread— rwlockattr_t结构，用pthread_rwlockattr_destroy回收结构。
397
I
399
#include <pthread.h>
int pthread_rwlockattr_init (pthread_rwlockattr_t *attr)； int pthread_rwlockattr_destroy (pthread_rwlockattr_t *attr)；
两者的返回值都是：若成功则返回0,否则返回错误编号
读写锁支持的唯一属性是进程共享属性，该属性与互斥量的进程共享属性相同。就像互斥 量的进程共皁属性一样，用一对函数来读取和设置读写锁的进程共享属性。
#include <pthread.h>
int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *
restrict attr,
int * restrict pshared)；
int pthread_rwlockattr_setpshared(pthread rwlockattr_t *attr,
int pshared)；
两者的返回值都是：若成功则返回0,否则返回错误编号

 
324 第12章线程控制
虽然POSIX只定义了一个读写锁属性，但不同平台的实现可以自由地定义额外的、非标准 的属性。
3.条件变量厲性
条件变量也有属性。与互斥量和读写锁类似，有一对函数用于初始化和回收条件变量属性。
#include <pthread.h>
int pthread_condattr_init(pthread_conda11r_t *); int pthread—condattiT—destroy (pthread—condattr_t *attr)；
两者的返回值都是：若成功则返回0，否则返回错误编号
与其他的同步原语一样，条件变量支持进程共享属性。
#include <pthread.h>	
int pthread—condattr一getpshared(const pthread 一condattr t *
	restrict attr,
	int * restrict pshared)；
int pthread_condattr	setpshared (pthread—condattr_t *attrf
	int pshared)；
	两者的返回值都是：若成功则返回0,否则返回错误编号
12.5重入
在10.6节中讨论了可重入函数和信号处理程序。在遇到重入问题时线程与信号处理程序类 似。有了信号处理程序和线程，多个控制线程在同一时间可能潜在地调用同一个函数。
如果一个函数在同一时刻可以被多个线程安全地调用，就称该函数是线程安全的。在 Single UNIX Specification中定义的所有函数，除了表12-5中列出的函数以外，其他函数都保证 是线程安全的。另外，ctermid和tmpnam函数在参数传入空指针时并不能保证是线程安全的。 类似地，wcrtomb和wcsrtombs函数如果参数mbstate_t^入的是空指针的话，也不能保证 它们是线程安全的。
表12-5 POSIX.1中不能保证线程安全的函数
asctime	ecvt	gethostent	getutxline	putc一unlocked
basename	encrypt	getlogin	gmtime	put char__un locked
catgets	endgrent	getnetbyaddr	hcreate	putenv
crypt	endpwent	getnetbyname	hdestroy	pututxline
ctime	endutxent	getnetent	hsearch	rand
dbm一clearerr	fcvt	getopt	inet_ntoa	readd!r
dbm一close	ftw	getprotobyname	164a	setenv
dbm_delete	gcvt	getprotobynuraber	1gamma	setgrent
dbm_error	getc_unlocked	getprotoent	1gammaf	setkey
dbm一fetch	getchar—unlocked	getpwent	lgammal	setpwent
dbm_firstkey	getdate	getpwnam	localeconv	setutxent
dbm_nextkey	getenv	getpwuid	localtime	strerror
dbm 一open	getgrent	getservbyname	lrand48	strtok
dbm_store	getgrgid	get servbyport	mrand48	ttyname
dirname	getgrnam	getservent	nftw	unsetenv
dlerror	gethostbyaddr	getutxent	nl_langinfo	wcstombs
drand48	gethostbyname	getutxid	ptsname	wctomb

 
12.5 重 入 325
支持线程安全函数的操作系统实现会在<unistd.h>中定义符号_POSIX_THREAD_ SAFE_FUNCTIONS0 应用程序可以在sysconf函数中传人_SC_THREAD_SAFE_FUNCTIONS 参数，以在运行时检査是否支持线程安全函数。所有遵循XSI的实现要求必须支持线程安全函数。
操作系统实现支持线程安全函数这一特性时，对P0SIX.1中的一些非线程安全函数，它会 提供可替代的线程安全版本，表12-6列出了这些函数的线程安全版本。很多函数并不是线程安■ 全的，因为他们返回的数据是存放在静态的内存缓冲区中。通过修改接口，要求调用者自己提 供缓冲区可以使函数变为线程安全的。
表12-6替代的线程安全函数
acstime—r	gmtime一r
ctime_r	localtime_r
getgrgid_r	rand一r
getgrnam_r	readdir_r
getlogin一r	8trerror_r
getpwnam_r	strtok_r
getpwuid_r	ttyname_r
表12-6中列出的函数的命名方式与他们的非线程安全版本的名字相似，只不过在名字最后 加了_r,以表明这个版本是可重入的。
如果一个函数对多个线程来说是可重入的，则说这个函数是线程安全的，但这并不能说明 对信号处理程序来说该函数也是可重入的。如果函数对异步信号处理程序的重入是安全的，那 么就可以说函数是异步-信号安全的。在10.6节中讨论可重入函数时，表10-3中的函数就是异步 信号安全函数^
除了表12-6中列出的函数，POSIX.1还提供了以线程安全的方式管理FILE对象的方法。可 以使用flockfile和ftrylockfile获取与给定FILE对象关联的锁。这个锁是递归的，当占 有这把锁的时候，还可以再次获取该锁，这并不会导致死锁。虽然这种锁的具体实现并无规定，
但要求所有操作FILE对象的标准I/O例程表现得就像它们内部调用了 flockf ile和 funlockf ile~*样0	國
#include <stdio.h>	
int ftrylockfile (FILE *fp) ?	
	返回值：若成功则返回0，否则返回非0值
void flockf ile (FILE *fp);	
void funlockf ile (FILE *fp);	
虽然标准的I/o例程从它们各自的内部数据结构这一角度出发，可能是以线程安全的方式实 现的，但有时把锁开放给应用程序仍然是非常有用的。这允许应用程序把多个对标准I/O函数的 调用组合成原子序列。当然，在处理多个file对象时，需要注意可能出现的死锁，并且需要 对所有的锁仔细地排序。
如果标准I/O例程都获取它们各自的锁，那么在做一次一个字符的I/O操作时性能就会出现 严重的下降。在这种情况下，需要对每一个字符的读或写操作进行获取锁和释放锁的动作。为 了避免这种开销，出现了不加锁版本的基于字符的标准I/o例程。

 
326 第12章线程控制
#include <stdio.h>
int getchar 一 unlocked(void>;
int getc一unlocked (FILE *fp);
两者的返回值都是：若成功则返回下一个字符，若已到达文件结尾或出错则返回EOF int putchar_unlocked(int c); int putc_unlocked(int c, FILE *fp);
两者的返回值都是•.若成功则返回c，若出错则返回EOF
除非被flockfile (或ftrylockfile)和funlockfile的调用包围，否则尽量不要 调用这四个函数，因为它们会导致不可预期的结果(即由多个控制线程非同步地访问数据所引 起的种种问题)。
一旦对FILE对象进行加锁，就可以在释放锁之前对这些函数进行多次调用。这样就可以 在多次的数据读写上分摊总的加解锁的开销。
程序清单12-3显示了getenv (见7.9节)一个可能的实现。因为所有调用getenv的线程 返回的字符串都存放在同一个静态缓冲区中，所以这个版本不是可重入的。如果两个线程同时 调用这个函数，就会看到不一致的结果。
	程序清单12-3 getenvW非可重入版本	
#include <limits.h>
#include <string.h>
static char envbuf[ARG_MAX];
extern char **environ；
char *
getenv(const char *name)
{
int i, len；
len = strlen(name)； for (i = 0; environ[i] if ((strncmp(name, (environ[i][len] strcpy(envbuf, return(envbuf)
}
}
return(NULL)；
!= NULL； i++) { environ[i], len) 0) && =='> {
&environ [i] [len+1]);
程序清单12-4给出了genenv的可重入版本，这个版本命名为getenv_r。它^ pthread_once函数(在12.6节中描述)来确保每个进程只调用一次thread_init函数。

 
12.5 重 入 327
	程序清单12-4 getenv的可重入(线程安全)版本
#include	<string.h>
#include	<errno.h>
#include	<pthread.h>
#include	<stdlib.h>
extern char **environ；
pthread一 mutex—t env_mutex；
static pthread 一once_t init_done = PTHREAD一ONCE_INIT;
static void thread 一init(void)
{ _
pthread_mutexattr__t attr; pthread_mutexattr_init(&attr);
pthread一nmtexattr一settype (&attr, PTHREAD_MUTEX_RECURSIVE)； pthread_mutex_init(&env_mutex, &attr)； pthread 一 nmtexattr—destroy(&attr>;
} 一 " int
getenv—r(const char *name, char *buf, int buflen)
{ 一
int i, len, olen；
pthread_once(&init_done, thread—init>; len = strlen(name)； pthread_mutex_lock(&env 一mutex); for (i = 0; environ[i] !« NULL； i++) {
if ((strncmp(name, environ[i]# len) == 0) &&
(environ[i][len] == '=,)) { olen = strlen(&environ[i][len+1])； if (olen >= buflen) {
pthread_mutex_unlock(&env_mutex); return (ENOSPC]";
}
strcpy(buf# &environ[i][len+1])； pthread_mutex 一unlock(&env 一 mutex>； return(O)；
pthread一 mutex 一unlock(&env_mutex)； re turn(ENOENT)；
要使重入，需要改变接口，调用者必须自己提供缓冲区，这样每个线程可以 使用各自不同的缓冲区从而避免其他线程的干扰。但是注意这还不足以使为线程 安全的，要使9616117_1'成为线程安全的，需要在搜索请求的字符串时保护环境不被修改。我 们可以使用互斥量，通过getenv_r^Pputenv函数对环境列表的访问进行序列化。
可以使用读写锁，从而允许对多次并发访问，但并发性的增强可能并不会在 很大程度上改善程序的性能。这里面有两个原因：首先，环境列表通常不会很长，所以扫描列 表时并不需要长时间地占有互斥量t其次，对getenv和putenv的调用不是频繁发生的，所以 改善它们的性能并不会对程序的整体性能产生很大的影响。
即使把成线程安全的，也并不意味着它对信号处理程序是可重入的。如果使
[4041

 
328 第12章线程控制
用的是非递归的互斥量，当线程从信号处理程序中调用getenv_r时，就有可能出现死锁。如 果信号处理程序在线程执行getenv_ri^中断了该线程，由于这时已经占有加锁的env_mutex， 这样其他线程试图对这个互斥量的加锁就会被阻塞，最终导致线程进入死锁状态。所以，必须 使用递归互斥量阻止其他线程改变当前正査看的数据结构，同时还要阻止来自信号处理程序的 死锁。问题是Pthread函数并不保证是异步信号安全的，所以不能把pthread函数用于其他 Ml函数，让该函数成为异步信号安全的。	□
12.6线程私有数据
线程私有数据(也称线程特定数据)是存储和査询与某个线程相关的数据的一种机制。把 这种数据称为线程私有数据或线程特定数据的原因是，希望每个线程可以独立地访问数据副本， 而不需要担心与其他线程的同步访问问题。
线程模型促进了进程中数据和属性的共享，许多人在设计线程模型时会遇到各种麻烦。但 在这样的模型中，为什么还需要提出一些合适的用于阻止共享的接口呢？其中有两个原因：
第一，有时候需要维护基于每个线程的数据。因为线程ID并不能保证是小而连续的整数， 所以不能简单地分配一个线程数据数组，用线程ID作为数组的索引。即使线程ID确实是小而连 续的整数，可能还希望有一些额外的保护，以防止某个线程的数据与其他线程的数据相混淆。
采用线程私有数据的第二个原因是：它提供了让基于进程的接口适应多线程环境的机制。 一个很明显的实例就是errno。回忆1.7节中对errno的讨论，(线程出现)以前的接口把 errno 定义为进程环境中全局可访问的整数。系统调用和库例程在调用或执行失败时设置 errno,把它作为操作失败时的附属结果。为了让线程也能够使用那些原本基于进程的系统调 用和库例程，errno被重新定义为线程私有数据。这样，一个线程做了设置errno的操作并不 会影响进程中其他线程的errno值。
回顾前面所学可知，进程中的所有线程都可以访问进程的整个地址空间。除了使用寄存器 以外，线程没有办法阻止其他线程访问它的数据，线程私有数据也不例外。虽然底层的实现部 分并不能阻止这种访问能力，但管理线程私有数据的函数可以提髙线程间的数据独立性。
在分配线程私有数据之前，需要创建与该数据关联的键。这个键将用于获取对线程私有数 据的访问权。使用pthread_key_create创建一个键。
#include <pthread.h>	
int pthread—key_create(pthread key t *	
void {*destructor) (void *)};
	返回值：若成功则返回0，否则返回错误编号
创建的键存放在指向的内存单元，这个键可以被进程中的所有线程使用，但每个线程 把这个键与不同的线程私有数据地址进行关联。创建新键时，每个线程的数据地址设为null值。
除了创建键以外，Pthread_key_create可以选择为该键关联析构函数，当线程退出时， 如果数据地址已经被置为非null数值，那么析构函数就会被调用，它唯一的参数就是该数据地 址。如果传入的办■参数为null,就表明没有析构函数与键关联。当线程调用pthread_ [4061 exit或者线程执行返回，正常退出时，析构函数就会被调用，但如果线程调用了 exit、 -exit, _Exit、abort或出现其他非正常的退出时，就不会调用析构函数。
线程通常使用malloc为线程私有数据分配内存空间，析构函数通常释放已分配的内存。

 
12.6线程私有数据 329
如果线程没有释放内存就退出了，那么这块内存将会丢失，即线程所属进程出现了内存泄漏。
线程可以为线程私有数据分配多个键，每个键都可以有一个析构函数与它关联。各个键的 析构函数可以互不相同，当然它们也可以使用相同的析构函数。每个操作系统在实现的时候可 以对进程可分配的键的数量进行限制(回忆表12-1中的PTHREAD_KEYS_MAX)。
线程退出时，线程私有数据的析构函数将按照操作系统实现中定义的顺序被调用。析构函 数可能会调用另一个函数，该函数可能会创建新的线程私有数据而且把这个数据与当前的键关 联起来。当所有的析构函数都调用完成以后，系统会检査是否还有非null的线程私有数据值与 键关联，如果有的话，再次调用析构函数。这个过程将会一直重复直到线程所有的键都为null 值线程私有数据，或者已经做了PTHREAD_DESTRUCTOR_ITERATIONS (见表12-1)中定义 的最大次数的尝试。
对所有的线程，都可以通过调用pthread_key_delete来取消键与线程私有数据值之间 的关联关系。
#include <pthread.h>
int pthread—key_delete (pthread—key一t *key);
返回值：若成功则返回0，否则返回错误编号
注意调用pthread_key_delete并不会激活与键关联的析构函数。要释放任何与键对应的线 程私有数据值的内存空间，需要在应用程序中采取额外的步骤。
需要确保分配的键并不会由于在初始化阶段的竞争而发生变动。下列代码可以导致两个线 程都调用 pthread_key_create ：
void destructor(void *)；
pthread 一key_t key; int init—done = 0；
int
threadfunc(void *arg)
{
if (!init一 done) { init_done = 1;
err = pthread—key一create(&key, destructor)；
} ——
}
有些线程可能看到某个键值，而其他的线程看到的可能是另一个不同的键值，这取决于系统是 如何调度线程的，解决这种竞争的办法是使用pthread_ond
#include <pthread.h>
pthread_once_t initflag = PTHREAD_ONCE_INIT ；
int pthread一 once (pthread一once 一 t * initflag • void	(void)) ,•
返回值：若成功则返回0，否则返回错误编号
•垆ag必须是一个非本地变量(即全局变量或静态变量)，而且必须初始化为PTHREAD. 0NCE_INITo

 
330 第12章线程控制
如果每个线程都调用pthread_once，系统就能保证初始化例程iWf/h只被调用一次，即 在系统首次调用pthread—once时。创建键时避免出现竞争的一个恰当的方法可以描述如下：
void destructor(void *)；
pthread—key_t key；
pthread 一once一t init一done = PTHREAD一0NCE_INIT; void
thread一init (void)
{ 一
) err = pthread_key一createUkey, destructor); int
threadfunc(void *arg}
{
pthread_once(&init一done• thread_init)；
键一且创建，就可以通过调用pthread_setspecific函数把键和线程私有数据关联起 来。可以通过Pthread_getspecific函数获得线程私有数据的地址。
#include <pthread.h>
void *p thread一 get specific (pthread一 key_t key)；
返回值：线程私有数据值；若没有值与键关联则返回NULL int pthread_setspecific (pthread_key_t key, const void * value)；
返回值：若成功则返回0，否则返回错误编号
如果没有线程私有数据值与键关联，pthread_getspecific将返回一个空指针，可以 据此来确定是否需要调用pthread_setspecific。
在程序清单12-3中，给出了getenv的假设实现，接着又给出了一个新的接口，提供的功 能相同，不过它是线程安全的(见程序清单12-4)。但是如果无法修改应用程序以直接使用新 的接口会出现什么问题呢？这种情况下，可以使用线程私有数据来维护每个线程的数据缓冲区 的副本，用于存放各自的返回字符串，如程序清单12-5所示。
	程序清单12-5线程安全的getenv的兼容版本	
#include <limits.h>
#include	<string.h>
#include	<pthread.h>
#include	<stdlib.h>
static pthread 一key—t key；
static pthread—once_t init—done = PTHREAD_ONCE—INIT; pthread_mutex_t env_mutex = PTHREAD_MUTEX_INITIALIZER;
extern char **environ；

 
12.7取消选项 331
static void thread—init(void)
{ —
pthread_key__create (Sckey, free); } _ ' char *
getenv(const char *name)
{.
int i, len； char *envbuf;
pthread-Once(&init_done, thread_init)； pthread_mutex_lock(&env_mutex)； envbuf = (char *)pthread_getspecific(key); if (envbuf 二二 NULL) {
envbuf = malloc(ARG_MAX)； if (envbuf == NULL) {
pthread_mutex_unlock(&env_mutex); return(NULL)；
}
pthread—setspecific(key, envbuf)；
} 一
len = strlen(name)；
for (i = 0; environ[i] != NULL； i++) {
if ((strncmp(name, environ[i], len) -= 0) && (environ[i] [len] =: r)) { strcpy(envbuf, &environ[i][len+1])； pthread_mutex_unlock(&env_mutex)； return(envbuf)；
}
}
pthread_mutex_unlock(&env_mutex)； return(NULL);
使用pthread_once来确保只为将要使用的线程私有数据创建了一个键。如果pthread_ getspecific返回的是空指针，需要分配内存然后把键与该内存单元关联，否则如果返回的 不是空指针，就使用Pthread_getspecific返回的内存单元。对析构函数，使用free来释 放之前由malloc分配的内存。只有当线程私有数据值为非mill时，析构函数才会被调用。
注意虽然这个版本的getenv是线程安全的，但它并不是异步-信号安全的。对信号处理程 序而言，即使使用递归的互斥量，这个版本的getenv也不可能是可重入的，因为它调用了 malloc,而malloc函数本身并不是异步-信号安全的。	口
12.7取消选项
有两个线程属性并没有包含在pthread__attr_t结构中，它们是可取消状态和可取消类 型。这两个属性影响着线程在响应Pthread_cancel函数调用时所呈现的行为(见11.5节)。
«T^)S^^Stt'5rP>5iPTHREAD_CANCEL_ENABLE ,也可以是 PTHREAD_ CANCEL_DISABLE。线程可以通过调用pthread_setcancelstate修改它的可取消状态。
#include <pthread.h>	
int pthread—setcancelstate(int state,	int *oldstate)；
	返回值：若成功则返回0,否则返回错误编号

 
332 第12章线程控制
pthread_setcancelstate把当前的可取消状态设置为如e，把原来的可取消状态存放在由 指向的内存单元中，这两步是原子操作。
回顾11.5节，pthread_cancel调用并不等待线程终止，在默认情况下，线程在取消请求 发出以后还是继续运行，直到线程到达某个取消点。取消点是线程检査是否被取消并按照请求 进行动作的一个位置。POSIX.1保证在线程调用奉12-7中列出的任何函数时，取消点都会出现。
表12-7 POSIX.1定义的取消点
accept	mq_timedsend	putpmsg	sigsuspend
aio_siispend	msgrcv	pwrite	sigtimedwait
clock_nanosleep	msgsnd	read	sigwait
close	msync	readv	sigwaitinfo
connect	nanosleep	recv	sleep
creat	open	recvfrom	system
fcntl2	pause	recvmsg	tcdrain
fsync	poll	select	usleep
getmsg	pread	sem_timedwait	wait
getpmsg	pthread_cond_timedwait	sem一wait	waitid
lockf	pthreadcond 一 wait	send	waitpid
mq_receive	pthread一j oin	sendmsg	write
mg send	pthread 一testcancel	sendto	writev
mq_timedreceive	putmsg	sigpause	
线程启动时默认的可取消状态是pthread_cancel_enable。当状态设为pthread_ CANCEL_DISABLE时，对pthread_cancel的调用并不会杀死线程；相反，取消请求对这个 线程来说处于未决状态。当取消状态再次变为PTHREAD_CANCEL_ENABLE时，线程将在下一 个取消点上对所有未决的取消请求进行处理。
除了表I2-7中列出的函数，POSIX.1还指定了表12-8中列出的函数作为可选的取消点。
注意表12-8中列出的有些函数并没有在本书中进一步讨论。许多函数在Single UNIX Specification 中是可选的。
如果应用程序在很长一段时间内都不会调用至1〗表12-7或表12-8中的函数(例如计算数学领 域的应用程序)，那么可以调用pthread_testcancel函数在程序中自己添加取消点。
#include <pthread.h>
void pthread_testcancel(void)；
调用pthread—testcancel时，如果有某个取消请求正处于未决状态，而且取消并没有 置为无效，那么线程就会被取消。但是如果取消被置为无效时，pthread_testcancel调用 就没有任何效果。
这里所描述的默认取消类型也称为延迟取消。调用pthread_cancel以后，在线程到达 取消点之前，并不会出现真正的取消。可以通过调用pthread_setcanceltype来修改取消 类型。
#include <pthread.h>
int pthread_set cancel type (int type, int * old type)；
返回值：若成功则返回0，否则返回错误编号

 
12.8线程和信号 333
表12-8 POSIX.1定义的可选取消点
catclose	ftell	getwc	printf
catgets	ftello	getwchar	putc
catopen	ftw	getwd	putc一unlocked
closedir	fwprintf	glob	putchar
closelog	fwrite	iconv_close	putchar_unlocked
ctermid	fwscanf	iconv_open	put 8
dbm—close	getc	ioctl	pututxline
dbm_delete	getc一unlocked	lseek	putwc
dbm—fetch	getchar	mkstemp	putwchar
dbm^nextkey	getchar 一uniocked	nftw	readdir
dbm 一open	getcwd	opendir	readdir—r
dbm—store	getdate	openlog	remove
dlclose	getgrent	pclose	rename
dlopen	getgrgid	perror	rewind
endgrent	getgrgid—r	popen	rewinddir
endhostent	getgrnam	posix_fadvise	scanf
endnetent	getgrnam 一r	posix_fallocate	seekdir
endprotoent	gethostbyaddr	posix_madvi8e	semop
endpwent	gethostbyname	posix_spawn	setgrent
endservent	gethostent	pos ix一spawnp	sethostent
endutxent	gethostname	posix_trace_clear	setnetent
fclose	getlogin	posix trace_close	setprotoent
fcntl	getlogin—r	posix_trace_create	setpwent
fflush	getnetbyaddr	posix_trace_create一withlog	setservent
fgetc	getnetbyname	posix_trace_eventtypelist__getnext_id	setutxent
fgetpos	getnetent	pos ix一t race_eventtypelist_rewind	strerror
fgets	getprotobynarae	posix_trace_flush	syslog
fgetwc	getprotobynumber	posix_trace_get_attr	trapfile
fgetws	getprotoent	posix 一trace一get一filter	tmpnam
fopen	getpwent	posix_trace—get—status	ttyname
fprintf	getpwnam	posix trace_getnext__event	ttyname_r
fputc	getpwnam__r	po8ix_trace_open	ungetc
fputs	getpwuid	posix_trace_rewind	ungetwc
fputwc	getpwuid 一r	posix—trace_set—filter	unlink
fputws	gets	posix_trace一shutdown	vfprintf
fread	getservbynarae	posix_trace_tiraedgetnext_event	vfwprintf
freopen	getservbyport	posix 一typed—mem_open	vprintf
fscanf	getservent	pthread 一rwlock一rdlock	vwprintf
f seek	getutxent	pthread_rwlock_tiraedrdlock	wprintf
fseeko	getutxid	pthread 一rwlock_timedwrlock	wscanf
f setpos	getutxline	pthread__rwlock_wrlock	
fype参数可以是PTHREAD_CANCEL_DEFERRED,也可以是PTHREAD_CANCEL_ ASYNCHRONOUS, pthread_setcanceltype函数把取消类型设置为type,把原来的取消类 型返回到oW/ype指向的整型单元。
异步取消与延迟取消不同，使用异步取消时，线程可以在任意时间取消，而不是非得遇到 取消点才能被取消。
12.8线程和信号
即使是在基于进程的编程模式中，信号的处理也可能是很复杂的。把线程引入编程范型， 就使信号的处理变得更加复杂。
每个线程都有自己的信号屏蔽字，但是信号的处理是进程中所有线程共享的。这意味着尽管 单个线程可以阻止某些信号，但当线程修改了与某个信号相关的处理行为以后，所有的线程都必 须共享这个处理行为的改变。这样如果一个线程选择忽略某个信号，而其他的线程可以恢复信号

 
334 第12幸线程控制
的默认处理行为，或者为信号设置一个新的处理程序，从而可以撒销上述线程的信号选择。
进程中的信号是递送到单个线程的。如果信号与硬件故障或计时器超时相关，该信号就被 发送到引起该事件的线程中去，而其他的信号则被发送到任意一个线程。
10.12节讨论了进程如何使用31993：0<：1^31<:来阻止信号发送。sigprocmask的行为在多 线程的进程中并没有定义，线程必须使用pthread_sigmask。
#include <signal.h>
int pthread一sigmask (int how, const sigset一t *restrict set, sigset_t *restrict oset)；
返回值：若成功则返回0,否则返回错误编号
pthread_sigmask函数与sigprocmask函数基本相同，除了pthread_sigmask工作在线 程中，并且失败时返回错误码，而不像sigprocmask中那样设置errno并返回-1。
线程可以通过调用s igwai t等待一个或多个信号发生。
#include <signal.h>
int sigwait (const sigset_t *restrict set,	mt *restrict signop)；
	返回值：若成功则返回0,否则返回错误编号
参数指出了线程等待的信号集，指向的整数将作为返回值，表明发送信号的数量。
如果信号集中的某个信号在sigwait调用的时候处于未决状态，那么sigwait将无阻塞 地返回，在返回之前，sigwait将从进程中移除那些处于未决状态的信号。为了避免错误动作 发生，线程在调用sigwait之前，必须阻塞那些它正在等待的信号。sigwait函数会自动取 消信号集的阻塞状态，直到有新的信号被递送。在返回之前，sigwait将恢复线程的信号屏蔽 字。如果信号在sigwait调用的时候没有被阻塞，在完成对sigwait调用之前会出现一个时 间窗，在这个窗口期，某个信号可能在线程完成sigwait调用之前就被递送了。
使用sigwait的好处在于它可以简化信号处理，允许把异步产生的信号用同步的方式处理。 为了防止信号中断线程，可以把信号加到每个线程的信号屏蔽字中，然后安排专用线程作信号 处理。这些专用线程可以进行函数调用，不需要担心在信号处理程序中调用哪些函数是安全的, 因为这些函数调用来自正常的线程环境，而非传统的信号处理程序，传统信号处理程序通常会 中断线程的正常执行。
如果多个线程在sigwait调用时，等待的是同一个信号，这时就会出现线程阻塞。当信号 递送的时候，只有一个线程可以从sigwait中返回。如果信号被捕获(例如进程通过使用 sigaction建立了一个信号处理程序)，而且线程正在sigwait调用中等待同一信号，那么这 时将由操作系统实现来决定以何种方式递送信号。在这种情况下，操作系统实现可以让 sigwait返回，也可以激活信号处理程序，但不可能出现两者皆可的情况。
要把信号发送到进程，可以调用kill (见10.9节)，要把信号发送到线程，可以调用 pthread 一kill。
#include <signal.h>
int pthread一kill (pthread—t thread, int signo)；
返回值：若成功则返回0，否则返回错误编号

 
12.8线程和信号 335
可以传一个0值的来检查线程是否存在。如果信号的默认处理动作是终止该进程，那 么把信号传递给某个线程仍然会杀掉整个进程。
注意闹钟定时器是进程资源，并且所有的线程共享相同的alarm。所以进程中的多个线程不 可能互不干扰(或互不合作)地使用闹钟定时器(这是习题12.6的内容)。
回忆程序清单10-16，等待信号处理程序设置标志，从而表明主程序应该退出。唯一可运行 的控制线程就是主线程和信号处理程序，所以阻塞信号足以避免错失标志修改。在线程中，需 要使用互斥量来保护标志，如程序清单12-6所示。
	程序清单12-6同步倍号处理	
#include "apue.h"
#include <pthread.h>
int
sigset一t
quitflag；
mask;
pthread_mutex_t lock pthread_cond_t wait =
void *
thr—fn(void *arg)
/* set nonzero by thread */
=PTHREAD_MUTEX一INITIALIZER; PTHREAD一石OND一INITIALIZER;
int err, signo；
for (;;) {
err = sigwait(&mask, &signo)； if (err != 0)
err_exit(err, "sigwait failed")； switch (signo) { case SIGINT:
printf("\ninterrupt\n")； break；
case SIGQUIT：
pthread_mutex_lock(&lock)； quitflag = 1；
pt hread一 mut ex」m lock (&lock)； pthread一cond」3ignal(&wait)； return(0)；
default:
printf("unexpected signal %d\nH, signo); exit(1)；
int
main(void)
int	err；
sigset一t oldmask； pthread_t tid;
sigemptyset(&mask)； sigaddset(imask, SIGINT); sigaddset(&mask, SIGQUIT)；

 
336 第12章线程控制
if ((err = pthread_sigmask(SIG_BLOCK, &mask, &oldmask)) != 0) err 一exit(err, HSIG_BLOCK error")；
err = pthread—create(&tid, NULL, thr—fn, 0)； if (err != 0)
err—exit(err, "can,t create thread");
pthread—mutex—lock(&lock)； while (quitflag == 0)
pthread_cond_wait(&wait, &lock)； pthread_mutex_unlock(&lock)；
/* SIGQUIT has been caught and is now blocked； do whatever */ quitflag = 0；
/* reset signal mask which unblocks SIGQUIT */ if (sigprocmask(SIG_SETMASK# &oldmask# NULL) < 0) err_sys("SIG_SETMASK error")； exit(0)；
这里并不让信号处理程序中断主控线程，而是由专门的独立控制线程进行信号处理。改动 quitflag的值是在互斥量的保护下进行的，这样主控线程不会在调用pthread_cond_ signal时错失唤醒调用。在主控线程中使用相同的互斥量来检查标志的值，并且原子地释放 1斥量，等待条件的发生。
注意在主线程开始时阻塞SIGINT和SIGQUIT。当创建线程进行信号处理时，新建线程继 承了现有的信号屏蔽字。因为sigwait会解除信号的阻塞状态，所以只有一个线程可以用于信 号的接收。这使得对主线程进行编码时不必担心来自这些信号的中断。
运行这个程序可以得到与程序清单10-16类似的输出结果：
Linux线程是以独立进程实现的，使用clone(2)共享资源。因此Linux线程在遇到信号时的行为与 其他操作系统实现不同。在POSIX.1线程模型中，异步信号被发送到进程以后，进程中当前没有阻塞该 信号的某个线程就被选中，接收信号。在Linux上，异少信号发送到特定的线程，而且因为每个线程是 作为独立的进程执行的，系统就不能选择当前没有阻塞该佶号的线程。这样一来，结果就是线程可能 不会注意到该信号。因此，如果信号产生于终端驱动程序，这样的信号是通知到进程组的，像程序清 单12-6中的程序就可以工作；但是如果试图用kill把信号发送给进程时，在Linux上就不能如预期的部 样工作。
12.9线程和fork
当线程调用fork时，就为子进程创建了整个进程地址空间的副本。回忆8.3节中讨论的写 时复制，子进程与父进程是完全不同的进程，只要两者都没有对内存做出改动，父进程和子进 程之间还可以共享内存页的副本。
 
键人中断字符
再次键人中断字符
用结束字符终止

 
12.9 线程和fork 337
子进程通过继承整个地址空间的副本，也从父进程那里继承了所有互斥量、读写锁和条件 变量的状态。如果父进程包含多个线程，子进程在fork返回以后，如果紧接着不是马上调用 exec的话，就需要清理锁状态。
在子进程内部只存在一个线程，它是由父进程中调用fork的线程的副本构成的。如果父 进程中的线程占有锁，子进程同样占有这些锁。问题是子进程并不包含占有锁的线程的副本， 所以子进程没有办法知道它占有了哪些锁并且需要释放哪些锁。
如果子进程从fork返回以后马上调用某个exec函数，就可以避免这样的问题。这种情况 下，老的地址空间被丢弃，所以锁的状态无关紧要。但如果子进程需要继续做处理工作的话， 这种方法就行不通，还需要使用其他的策略。
要清除锁状态，可以通过调用口'：]^63<1_36£011<；函数建立/；0峻处理程序。
#include <pthread.h>
int pthread_atfork (void (*prepare) (void) , void (*parent) (void), void (*child) (void))；
返回值：若成功则返回0，否则返回错误编号
用pthread_atfork函数最多可以安装三个帮助清理锁的函数。prepare fork处理程序由 父进程在fork创建子进程前调用，这个fork处理程序的任务是获取父进程定义的所有锁。 parent fork处理程序是在fork创建了子进程以后，但在fork返回之前在父进程环境中调用的， 这个fork处理程序的任务是对fork处理程序获得的所有锁进行解锁。child fork处理程序 在fork返回之前在子进程环境中调用，与parcnf fork处理程序一样，c/u_W fork处理程序也必须 释放prepare fork处理程序获得的所有锁。
注意不会出现加锁一次解锁两次的情况，虽然看起来也许会出现。当子进程地址空间创建 的时候，它得到了父进程定义的所有锁的副本。因为prepflM fork处理程序获取所有的锁，父进 程中的内存和子进程中的内存内容在开始的时候是相同的。当父进程和子进程对他们的锁的副 本进行解锁的时候，新的内存是分配给子进程的，父进程的内存内容被复制到子进程的内存中 (写时复制)，所以就会陷入这样的假象，看起来父进程对它所有的锁的副本进行了加锁，子进 程对它所有的锁的副本进行了加锁。父进程和子进程对在不同内存位置的重复的锁都进行了解 锁操作，就好像出现了下列的事件序列：
(1)	父进程获得所有的锁。
(2)	子进程获得所有的锁。
(3)	父进程释放它的锁。
(4)	子进程释放它的锁。
可以多次调用pthread_atfork函数从而设置多套fork处理程序。如果不需要使用其中某 个处理程序，可以给特定的处理程序参数传入空指针，这样它就不会起任何作用。使用多个 fork处理程序时，处理程序的调用顺序并不相同。pamiJ和c/h_W fork处理程序是以它们注册时的 顺序进行调用的，而prepflrc fork处理程序的调用顺序与它们注册时的顺序相反。这样可以允许 多个模块注册它们自己的fork处理程序，并且保持锁的层次。
例如，假设模块A调用模块B中的函数，而且每个模块有自己的一套锁。如果锁的层次是A 在B之前，模块B必须在模块A之前设置fork处理程序。当父进程调用fork时，就会执行以下的 步骤，假设子进程在父进程之前运行。
画
[4171

 
338 第12幸线程控制
(1)	调用模块A的prepflM	fork处理程序获取模块A的所有锁。
(2)	调用模块B的prepare	fork处理程序获取模块B的所有锁。
(3)	创建子进程。
(4)	调用模块B中的c/u_W	fork处理程序释放子进程中模块B的所有锁。
(5)	调用模块A中的c/u‘W	fork处理程序释放子进程中模块A的所有锁。
(6)	fork函数返回到子进程。
(7)	调用模块B中的/wenf	fork处理程序释放父进程中模块B的所有锁。
(8)	调用模块A中/wenf	fork处理程序来释放父进程中模块A的所有锁。
(9)	fork函数返回到父进程。
如果fork处理程序是为了清理锁状态，那么又由谁来负责清理条件变量的状态呢？在有些 操作系统的实现中，条件变量可能并不需要做任何清理。但是有些操作系统实现把锁作为条件 变量实现的一部分，这种情况下的条件变量就需要清理。问题是目前不存在这样的接口允许做 锁的清理工作，如果锁是嵌入到条件变量的数据结构中的，那么在调用fork之后就不能使用 条件变量，因为还没有可移植的方法对锁进行状态清理。另外，如果操作系统的实现是使用全 局锁保护进程中所有的条件变量数据结构，那么操作系统实现本身可以在fork库例程中做清 理锁的工作，但是应用程序不应该依赖操作系统实现中这样的细节。
程序清单12-7中的程序描述了如何使用pthread_atfork和fork处理程序。
程序清单12-7 pthread_atfork实例
#include "apue.h"
#include <pthread.h>
pthread_rautex_t lockl = PTHREAD_MUTEX_INITIALIZER； pthread__mutex—t lock2 = PTHREAD 一 MUTEX—INITIAL I ZER;
void
prepare(void)
{
printf("preparing locks■.•\n")? pthread一 mutex一lock(&lockl); pthread一mutex一lock(&lock2)；
} ~ ~ void
parent(void)
{
printf("parent unlocking locks...\nM)； pthread_mutex—unlock(&l〇ckl)； pthread_rautex_unlock(&lock2)；
} " _ void
child(void)
{
printf("child unlocking locks...\n"); pthread_mutex_unlock(&lockl)； pthread」nutex一unlock(&lock2)；
} ~ ~ void *

 
12.10 线程和I/O 339
thr一fn(void *arg)
{ 一
printf("thread started.•.\n")； pause()； return(0);
int
main(void)
{
int	err；
pid_t pid； pthread_t tid;
#if defined(BSD) || defined(MACOS)
printf("pthread_atfork is unsupported\n");
#else
if ((err = pthread_atfork(prepare, parent, child)) != 0) err 一exit(err, "can't install fork handlers"); err = pthread 一create(&tid, NULL, thr_fn, 0); if (err != 0)
err一exit(err, "can't create thread")； sleep(2);
printf("parent about to fork...\n")； if ((pid = fork() ) < 0)
err__quit (M fork failed”； else if (pid *= 0) /* child */
printf("child returned from fork\n"); else	/* parent */
printf ("parent returned from fork\n,!)；
#endif
exit(0);
程序中定义了两个互斥量，lockl和lock2, prepare fork处理程序获取这两把锁，child fork处理程序在子进程环境中释放锁，parent fork处理程序在父进程中释放锁。
运行该程序，得到如下输出：
$ ./a.out
thread started..■ parent about to fork.•• preparing locks... child unlocking locks... child returned from fork parent unlocking locks... parent returned from fork
可以看出，prepare fork处理程序在调用fork以后运行，cWW fork处理程序在fork调用返 回到子进程之前运行，parcnffork处理程序在fork调用返回给父进程前运行。	口
12.10线程和I/O
在3_.11节中介绍了pread和pwrite函数，这些函数在多线程环境下是非常有帮助的，因 为进程中的所有线程共享相同的文件描述符。
考虑两个线程，在同一时间对同一个文件描述符进行读写操作。

 
340 第12幸线程控制
线程A
lseek(fd, 300, SEEK_SET); read(fd, buf1, 100);
线程B
lseek(fd, 700, SEEK一SET); read(fd, buf2, 100);
如果线程A执行lseek,然后线程B在线程A调用read之前调用lseek，那么两个线程最终会 读取同一条记录。很显然这不是我们希望的。
为了解决这个问题，可以使用pread,使偏移量的设定和数据的读取成为一个原子操作。
使用pread可以确保线程A读取偏移量为300的记录，而线程B读取偏移量为700的记录。可以 使用pwrite来解决并发线程对同一文件进行写操作的问题。
12.11小结
在UNIX系统中，线程提供了分解并发任务的一种替代模型。线程促进了独立控制线程之 间的共享，但也带来了它特有的同步问题。本章中，我们考查了如何调整线程和它们的同步原 语，讨论了线程的可重入性’还学习了线程如何与其他面向进程的系统调用进行交互。
习题
12.1在Linux系统中运行程序清单12-7中的程序，但把输出结果重定向到文件中，并解释结果。 12.2实现putenv_r，即putenv的可重入版本。确保实现既是线程安全的，也是异步信号安 全的。
12.3是否可以通过在函数开始的时候阻塞信号，并在函数返回之前恢复原来的信号屏蔽字这 种方法，让程序清单12-5中的程序变成异步信号安全的？解释其原因。
124写一个程序运用程序清单I2-5中的getenv版本，在FreeBSD上编译并运行该程序，会出 现什么结果？解释其原因。
12.5假设可以在一个程序中创建多个线程执行不同的任务’为什么还是有可能会用fork?解 释其原因。
重新实现程序清单10_21中的程序，在不使用nanosleep的情况下使它成为线程安全的。 12.7调用fork以后，是否可以通过首先用pthread_cond_destroy销毁条件变量，然后用 pthread_cond_init初始化条件变量这种方法，安全地在子进程中对条件变量进行重 新初始化？
线程A
pread(fd, buf1, 100, 300)
线程B
pread(fd, buf2, 100, 700)；

 

